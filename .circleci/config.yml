version: 2.1

# CircleCI doesn't handle large file sets properly for local builds
# https://github.com/CircleCI-Public/circleci-cli/issues/281#issuecomment-472808051
localCheckout: &localCheckout
  run: |-
    PROJECT_PATH=$(cd ${CIRCLE_WORKING_DIRECTORY}; pwd)
    mkdir -p ${PROJECT_PATH}
    cd /tmp/_circleci_local_build_repo
    git ls-files -z | xargs -0 -s 2090860 tar -c | tar -x -C ${PROJECT_PATH}
    cp -a /tmp/_circleci_local_build_repo/.git ${PROJECT_PATH}

jobs:
  ubuntu_x64_liboqsgo:
    description: A template for building and testing liboqs-go on Ubuntu Linux
    docker:
      - image: openquantumsafe/ci-ubuntu-bionic-x86_64:latest
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
    steps:
      - checkout # change this from "checkout" to "*localCheckout" when running CircleCI locally
      - run:
          name: Authenticate to Docker
          command: |
            echo $DOCKER_PASSWORD | docker login --username $DOCKER_LOGIN --password-stdin
      - run:
          name: Build and install liboqs
          command: |
            git clone --branch main --single-branch --depth 1 https://github.com/open-quantum-safe/liboqs
            cd liboqs && mkdir build && cd build
            cmake .. -GNinja -DBUILD_SHARED_LIBS=ON -DOQS_BUILD_ONLY_LIB=ON
            ninja install
      - run:
          name: Run examples
          command: |
            export LD_LIBRARY_PATH=/usr/local/lib
            export PKG_CONFIG_PATH=`pwd`/.config
            go run examples/kem/kem.go
            go run examples/sig/sig.go
            go run examples/rand/rand.go
      - run:
          name: Run unit tests
          command: |
            export LD_LIBRARY_PATH=/usr/local/lib
            export PKG_CONFIG_PATH=`pwd`/.config
            go test -v oqstests/*

  macOS:
    description: A template for building and testing liboqs-go on macOS
    macos:
      xcode: "13.2.1"
    steps:
      - checkout # change this from "checkout" to "*localCheckout" when running CircleCI locally
      - run:
          name: Install dependencies
          command: |
            env HOMEBREW_NO_AUTO_UPDATE=1 brew install ninja cmake go pkg-config
      - run:
          name: Build and install liboqs
          command: |
            git clone --branch main --single-branch --depth 1 https://github.com/open-quantum-safe/liboqs
            cd liboqs && mkdir build && cd build
            cmake .. -GNinja -DBUILD_SHARED_LIBS=ON -DOQS_BUILD_ONLY_LIB=ON
            ninja install
      - run:
          name: Run examples
          command: |
            export LD_LIBRARY_PATH=/usr/local/lib
            export PKG_CONFIG_PATH=`pwd`/.config
            go run examples/kem/kem.go
            go run examples/sig/sig.go
            go run examples/rand/rand.go
      - run:
          name: Run unit tests
          command: |
            export LD_LIBRARY_PATH=/usr/local/lib
            export PKG_CONFIG_PATH=`pwd`/.config
            go test -v oqstests/*

  dockerbuild:
    description: Building and pushing oqs-go enabled image
    docker:
      - image: openquantumsafe/ci-ubuntu-bionic-x86_64:latest
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
    steps:
      - checkout # change this from "checkout" to "*localCheckout" when running CircleCI locally
      - setup_remote_docker
      - run:
          name: Authenticate to Docker
          command: |
            echo $DOCKER_PASSWORD | docker login --username $DOCKER_LOGIN --password-stdin
      - run:
          name: Build docker image
          command: |
            docker build --build-arg MAKE_DEFINES="-j 18" -t oqs-go .
          working_directory: docker
      - run:
          name: Test docker image
          command: |
            docker run oqs-go
      - when:
          condition:
            equal: [ main, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Push docker image
                command: |
                   export SHORT_GITID=`git rev-parse --short HEAD`
                   docker tag oqs-go $TARGETNAME/go:latest && \
                   docker push $TARGETNAME/go:latest && \
                   docker tag oqs-go $TARGETNAME/go:$SHORT_GITID && \
                   docker push $TARGETNAME/go:$SHORT_GITID

workflows:
  build:
    jobs:
# max be removed completely if github-based docker buildx works OK:
#      - dockerbuild:
#          context: openquantumsafe
      - ubuntu_x64_liboqsgo:
          name: ubuntu-bionic
          context: openquantumsafe
      - macOS:
          name: macOS-base
          context: openquantumsafe
